<style lang="less">
#discussion-detail {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  .top-panel {
    margin-left: 30rpx;
    margin-bottom: 30rpx;
    .header {
      font-size: 32rpx;
      color: #888;
    }
    .title {
      display: flex;
      margin-right: 40rpx;
      justify-content: space-between;
      align-items: center;
      margin-top: 10rpx;
      .name-and-qrcode{
        display: flex;
        align-items: center;
      }
      .name {
        font-size: 45rpx;
        color: #333;
        font-weight: bold;
      }
      .qrcode{
        width:45rpx;
        height: 45rpx;
        margin-right: 10rpx;
        flex-shrink: 0;
      }
      .watch {
        height: 50rpx;
        font-size: 24rpx;
        line-height: 50rpx;
        padding: 0 20rpx;
        border-radius: 100rpx;
        border: none;
        background: #eb5757;
        color: #fff;
        font-weight: #fff;
        font-weight: bold;
      }
    }
    .last-modified-time {
      font-size: 24rpx;
      color: #888;
      margin-top: 10rpx;
    }
    .host-name {
      display: flex;
      margin-top: 10rpx;
      flex-wrap: wrap;
      .tag {
        font-size: 24rpx;
        color: #888;
      }
      .name {
        font-size: 24rpx;
        color: #333;
        margin: 0 15rpx;
      }
    }
  }
  .admin-panel {
    margin-left: 30rpx;
    display: flex;
    margin-top: 15rpx;
    margin-bottom: 15rpx;
    .delete {
      color: #eb5757;
      font-size: 24rpx;
      margin-right: 15rpx;
    }
    .assistant {
      color: #13acd9;
      font-size: 24rpx;
    }
  }
  .filter-panel {
    margin-left: 30rpx;
    margin-top: 17rpx;
    margin-right: 40rpx;
    margin-bottom: 17rpx;
    display: flex;
    justify-content: space-between;
    align-items: center;
    .sort {
      display: flex;
      align-items: center;
      .tag {
        color: #888;
        font-size: 24rpx;
        margin-right: 15rpx;
      }
      .strategy {
        color: #13acd9;
        font-size: 24rpx;
      }
    }
    .selected {
      display: flex;
      align-items: center;
      .tag {
        color: #888;
        font-size: 24rpx;
        margin-right: 15rpx;
      }
      .circle {
        width: 16px;
        height: 16px;
        border: solid #eee 1px;
        border-radius: 100px;
      }
    }
  }
  .search-panel {
    margin-left: 30rpx;
    margin-top: 15rpx;
    margin-right: 40rpx;
    margin-bottom: 15rpx;
    display: flex;
    justify-content: space-between;
    align-items: center;
    .search-form {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      font-size: 24rpx;
      .keyword {
        width: 100%;
        height: 25rpx;
        margin-right: 10rpx;
        padding: 0 20rpx;
        border-radius: 100rpx;
        line-height: 50rpx;
        font-size: 24rpx;
        background-color: #eee;
      }
      .search-btn {
        width: 70rpx;
        height: 50rpx;
        text-align: center;
        line-height: 50rpx;
        border-radius: 1000rpx;
        font-size: 24rpx;
        padding: 0 15rpx;
        background-color: #13acd9;
        font-weight: bold;
        color: #fff;
      }
    }
  }
  .new-question-panel {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    border-top-style: solid;
    border-top-width: 1px;
    border-top-color: #f0f0f0;
    background: #fff;
    button {
      background: #13acd9;
      color: #fff;
      font-size: 32rpx;
      font-weight: bold;
      margin: 20rpx 100rpx;
      border-radius: 100rpx;
    }
  }
  .back-to-top{
    font-size: 32rpx;
    padding: 15rpx 30rpx;
    border-radius: 100rpx;
    position: fixed;
    margin: 0 auto;
    top: 20rpx;
    font-weight: bold;
    color: #333;
    background: #fff;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.25);
    opacity: 0.7;
    left: 281rpx;
  }
  .question-panel {
    margin-bottom: 120rpx;
    .empty{
      font-size: 32rpx;
      color: #888;
      text-align: center;
      margin: 40rpx;
    }
    .item-cell {
      padding: 20rpx 30rpx;
      width: 690rpx;
      .top {
        font-size: 24rpx;
        color: #888;
        margin-bottom: 10rpx !important;
      }
      .title {
        font-size: 32rpx;
        color: #333;
        font-weight: bold;
        margin-bottom: 10rpx;
      }
      .content{
        image{
          width: 670rpx;
          height: 500rpx;
          border: solid 1rpx #f0f0f0;
          background: #f0f0f0;
        }
      }
      .description {
        font-size: 24rpx;
        color: #333;
        margin-bottom: 10rpx;
      }
      .bottom {
        display: flex;
        align-items: center;
        text {
          font-size: 24rpx;
          color: #888;
          margin-right: 10rpx;
        }
        icon {
          margin-right: 10rpx;
        }
      }
    }
    .item-cell:active {
      background: #eee;
    }
  }
  .sperator{
    border-top-color: #EEE;
    border-top-width: 20rpx;
    border-top-style: solid;
  }
}

.homepage-and-refresh{
  position: fixed;
  right: 30rpx;
  bottom: 140rpx;
  display: flex;
  align-items: center;
  flex-direction: column;
  height: 160rpx;
  justify-content: space-between;
  .floating-button{
    background: rgba(0, 0, 0, 0.4);
    border-radius: 1000rpx;
    width: 75rpx;
    height: 75rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.25);
    image{
      width: 50rpx;
      height: 50rpx;
    }
  }
  .floating-button:active{
    background: rgba(0, 0, 0, 0.8);
  }
}
</style>
<template lang="pug">
  view#discussion-detail(wx:if="{{ready}}")
    form.top-panel(report-submit="true" bindsubmit="collectFormId")
      view.header \#{{code}}
      view.title
        button.button-less.name-and-qrcode(@tap="showQrCode" plain="true" form-type="submit")
          image.qrcode(src="cloud://discussion-room-3fd312.6469-discussion-room-3fd312/assets/erweima-2.png")
          view.name {{courseName}} 
        button.button-less.watch(wx:if="{{isWatched}}" @tap="cancelWatch" plain="true" form-type="submit") 取消关注
        button.button-less.watch(style="background:#13ACD9" wx:else @tap="cancelWatch" plain="true" form-type="submit") 关注
      view.last-modified-time 创建时间 {{lastModifiedTime}}
      view.host-name
        view.tag 主持人
        view.name {{hostName}}
        view.tag 老师
      view.host-name
        view.tag {{howManyWatch}}
    view.dot-line(wx:if="{{isAdmin}}")
    view.admin-panel(wx:if="{{isAdmin}}")
      view.delete(@tap="deleteRoom") 删除答疑室
      view.assistant(@tap="setAssistant") 设置管理员
    view.sperator
    view.search-panel(report-submit="true" bindsubmit="collectFormId")
      view.search-form
        input.keyword(placeholder="请输入你想查询的问题" adjust-position=false bindinput='setKeywords')
        view.search-btn( @tap='clickSearch') 查找
    view.dot-line
    view.filter-panel(report-submit="true" bindsubmit="collectFormId")
      view.sort
        view.tag 排序↓
        view.strategy(@tap="toggleSort" plain="true" form-type="submit") {{sort}}
      view.selected
        view.tag 只看精选
        icon(@tap="toggleSelected" type="success" size="16" wx:if="{{selectedOnly}}")
        view.circle(wx:else @tap="toggleSelected")
    view.dot-line
    form.question-panel(report-submit="true" bindsubmit="collectFormId")
      view.empty(wx:if="{{!hasQuestion}}" @tap="refresh") {{emptyHint}}
      repeat(for="{{questionList}}" index="index" key="item._id")
        button.item-cell.button-less(plain="true" form-type="submit" @tap="showQuestion({{item._id}})")
          view.top {{item.lastModifiedTime}}的问题
          view.title {{item.title}}
          view.content
            view.text
              view.description {{item.description}}
            image(mode="aspectFill" wx:if="{{item.imageCode}}" src="{{item.imageCode}}")
          view.bottom
            text 由 {{item.questionerName}} 提出 · {{item.watch}} 名同学关注此问题
            icon(type="success" size="15" wx:if="{{item.isSelected}}")
            text(wx:if="{{item.isSelected}}") 精选
        view.dot-line(style="margin-left:30rpx;")
    view.new-question-panel
      button(@tap="createQuestion") 我要提问
    view.back-to-top(@tap="backToTop" wx:if="{{scroll > 50}}") 回到顶部
    view.homepage-and-refresh
      view.floating-button(@tap="homepage")
        image(src="cloud://discussion-room-3fd312.6469-discussion-room-3fd312/assets/shouye-xianxing.png")
      view.floating-button(@tap="refresh")
        image(src="cloud://discussion-room-3fd312.6469-discussion-room-3fd312/assets/shuaxin.png")
</template>

<script>
import wepy from 'wepy';
import callFunction from '../../utils/callFunction'; // 引入云函数调用的便捷封装
import getUserInfo from '../../utils/getUserInfo';
//import moment from 'moment'
//import momentCN from 'moment/locale/zh-cn'
const moment = require('moment');
const db = wx.cloud.database();
export default class DiscussionRoomDetail extends wepy.page {
  config = {
    navigationBarTitleText: '答疑室'
  };
  components = {};

  mixins = [];

  data = {
    ready:false,
    discussionRoomId: '',
    code: '',
    courseName: '',
    hostName: '',
    lastModifiedTime: '',
    howManyWatch: '1人关注',
    buttonText: '取消关注',
    buttonClass: 'negative',
    isWatched: false,
    isAdmin: false,
    sort: '最新动态', // 最多关注
    selectedOnly: false,
    page: 0, // 分页计数器
    questionList: [],
    loading: false,
    emptyHint:'空空如也，点击刷新', // 加锁
    scroll:0,
    keywords: ''
  };

  computed = {
    hasQuestion(){
      return this.questionList.length > 0
    }
  };

  onShareAppMessage(obj){
    let title = `${this.hostName}老师创建了「${this.courseName}」的课程在线答疑室，快来提问吧!`
    return {
      title,
      url:`/pages/discussionRoom/detail?discussionRoom=${this.discussionRoomId}`
    }
  }
  methods = {
    setKeywords(event) {
      this.keywords = event.detail.value;
      if(this.keywords === ''){
        this.questionList = []
        this.page = 0
        this.loadQuestion();
      }
    },
    async collectFormId(e) {
      let userInfo = await getUserInfo();
      // 插入formId
      db.collection('FormId').add({
        data:{
          userId:userInfo._id,
          formId:e.detail.formId,
          expireTime:+moment()+7*24*60*60*1000
        }
      })
    },
    async showQrCode(){
      wx.showLoading({title:'生成小程序码'})
      let res = await callFunction('wxaCode/getWXAcode',{scene:this.discussionRoomId, path:'pages/discussionRoom/detail'})
      wx.hideLoading()
      wx.previewImage({
        urls: ["data:image/jpeg;base64,"+res.data] // 需要预览的图片http链接列表
      })
    },
    showQuestion(questionId){
      wx.navigateTo({
        url:'/pages/question/detail?questionId='+questionId
      })
    },
    homepage(){
      wx.navigateBack({
        delta:100
      })
      wx.redirectTo({
        url:'/pages/index'
      })
    },
    async refresh(){
      this.questionList = []
      this.page = 0
      wx.showLoading({title:'正在刷新'})
      await this.loadQuestion()
      wx.hideLoading()
    },
    toggleSort(){
      this.emptyHint = '空空如也，点击刷新'
      this.sort = this.sort === '最新动态' ? '最多关注' : '最新动态'
      this.questionList = []
      this.page = 0
      this.loadQuestion()
    },
    toggleSelected(){
      this.selectedOnly = !this.selectedOnly
      this.questionList = []
      this.emptyHint = this.selectedOnly ? '还没有精选问题' : '还没有问题，不如提个问？'
      this.page = 0
      this.loadQuestion()
    },
    clickSearch(){
      this.emptyHint = '正在搜索中，请稍后~~'
      this.questionList = []
      this.page = 0
      this.loadQuestion()
    },
    backToTop(){
      wx.pageScrollTo({
        scrollTop:0
      })
    },
    async cancelWatch(){
      const db = wx.cloud.database()
      const userInfo = await getUserInfo()
      if(this.loading){
        return
      }
      this.loading = true
      wx.showLoading({title:'请稍候'})
      try{
        let res = await callFunction('discussionRoom/watch',{discussionRoomId:this.discussionRoomId, setOrCancel:!this.isWatched})
        if(res.success){
          wx.hideLoading()
          this.isWatched = (await db.collection('WatchDiscussionRoom').where({discussionRoomId:this.discussionRoomId, watcherId:userInfo._id}).count()).total === 1
          this.$apply()
        } else {
          wx.hideLoading()
          wx.showToast({
            icon:'none',
            title:res.reason
          })
        }
      } catch(e) {
        console.log(e)
        wx.showToast({
            icon:'none',
            title:'取消关注失败'
        })
      }
      this.loading = false
    },
    async deleteRoom(){
      let that = this
      wx.showModal({
        title: '确认删除',
        content: '答疑室删除后将无法恢复，所有问题/答案/评论都将丢失',
        async success(res) {
          if (res.confirm) {
            try{
              wx.showLoading({title:'正在删除'})
              let res = await callFunction('discussionRoom/delete',{discussionRoomId:that.discussionRoomId})
              if(res.success){
                wx.showToast({
                  title:'删除成功'
                })
                wx.redirectTo({url:'/pages/discussionRoom/list'})
              } else {
                throw res.reason
              }
              wx.hideLoading()
            } catch(e) {
              console.log(e)
              wx.showToast({
                icon:'none',
                title:e
              })
            }
          } else if (res.cancel) {
            console.log('用户点击取消')
          }
        }
      })
    },
    setAssistant(){
      wx.navigateTo({
        url:`/pages/discussionRoom/assistant?discussionRoomId=${this.discussionRoomId}`
      })
    },
    createQuestion(){
      wx.navigateTo({
        url:`/pages/question/createOrModify?discussionRoomId=${this.discussionRoomId}`
      })
    }
  };
  async loadQuestion() {
    const db = wx.cloud.database()
    if (this.loading) {
      return;
    }
    this.loading = true; // 加锁
    this.$apply();
    let query = { 
        discussionRoomId : {							
          $regex:'.*' + this.discussionRoomId + '.*',		
          $options: 'i'							
        },
        title : {
          $regex:'.*' + this.keywords + '.*',
          $options: 'i'
        },
    };
    // let query = { 
    //     discussionRoomId : {							
    //       $regex:'.*' + this.discussionRoomId + '.*',		
    //       $options: 'i'							
    //     },
    //     db.command.or(
    //       {
    //         title : {
    //           $regex:'.*' + this.keywords + '.*',
    //           $options: 'i'
    //         },
    //       },
    //       {
    //         description : {
    //           $regex:'.*' + this.keywords + '.*',
    //           $options: 'i'
    //         },
    //       }
    //     )
    // }
      if (this.selectedOnly) {
        // 如果设置了只看精选
        query.isSelected = true;
      }
      let res 
      if(this.page > 0){
        res = await db
        .collection('Question')
        .skip(this.page * 10)
        .limit(10)
        .orderBy(
          this.sort === '最新动态' ? 'lastModifiedTime' : 'watch',
          'desc'
        )
        .orderBy(
          'lastModifiedTime',
          'desc'
        )
        .where(query).get();
      } else {
        res = await db
        .collection('Question')
        .limit(10)
        .orderBy(
          this.sort === '最新动态' ? 'lastModifiedTime' : 'watch',
          'desc'
        )
        .orderBy(
          'lastModifiedTime',
          'desc'
        )
        .where(query).get();
      }
      this.page = this.page + 1; // 记录分页
      this.questionList = this.questionList.concat(
        res.data.map(k => {
          moment.locale('zh-cn');
          k.description = k.description.slice(0, 100)
          k.lastModifiedTime = moment(k.lastModifiedTime).fromNow();
          return k;
        })
      );
      this.questionList.length === 0 ? this.emptyHint = '没有搜索结果': this.emptyHint
      this.loading = false
      this.$apply()
    }

  events = {};
  
  onReachBottom() {
    this.loadQuestion()
  }
  onPageScroll(obj){
    this.scroll = obj.scrollTop
    this.$apply()
  }
  init(){
    this.ready=false;
    this.discussionRoomId= '';
    this.code= '';
    this.courseName= '';
    this.hostName= '';
    this.lastModifiedTime= '';
    this.howManyWatch= '1人关注';
    this.buttonText= '取消关注';
    this.buttonClass= 'negative';
    this.isWatched= false;
    this.isAdmin= false;
    this.sort= '最新动态'; // 最多关注
    this.selectedOnly= false;
    this.page= 0; // 分页计数器
    this.questionList= [];
    this.loading= false;
    this.emptyHint='空空如也，点击刷新'; // 加锁
    this.scroll=0;
    this.$apply()
  }

  async loadInfo(discussionRoomId) {
    const db = wx.cloud.database();
    let info
    try {
      info = (await db
        .collection('DiscussionRoom')
        .doc(discussionRoomId)
        .get()).data;
      console.log('刷新答疑室状态')
      return info
    } catch (e) {
      // 获取失败
      console.log(e)
      wx.showToast({icon:'none', title:'答疑室不存在或已删除'})
      setTimeout(() => {
        wx.redirectTo({url:'/pages/index'})
      }, 1500);
    }
  }

  async loadAssistant(){
    console.log(this.discussionRoomId)
    let record = await callFunction('assistant/getAllAssistants', {discussionRoomId:this.discussionRoomId})
    let assistantList = record.data.map(async(k) => {
      let userData = (await db.collection('User').doc(k.assistantId).get()).data
      return userData.name
    })
    assistantList = await Promise.all(assistantList)
    console.log(assistantList)
    if(assistantList.length > 0){
      this.hostName = this.hostName + '，' + assistantList.join('，')
    }
    this.$apply()
  }

  async onLoad(options) {
    this.init()
    let discussionRoomId = options.discussionRoomId ? options.discussionRoomId :  options.scene
    console.log(options)
    let userInfo = await getUserInfo();
    if (!discussionRoomId) {
      // 没有传入答疑室ID
      wx.showToast({icon:'none', title:'答疑室不存在或已删除'})
      wx.navigateBack({delta:1})
    }
    wx.showLoading({title:'正在加载'})
    // 获取答疑室基本信息
    const db = wx.cloud.database();
    let info = await this.loadInfo(discussionRoomId)
    this.discussionRoomId = discussionRoomId
    this.courseName = info.courseName;
    this.code = info.code;
    moment.locale('zh-cn');
    this.lastModifiedTime = moment(info.lastModifiedTime)
      .locale('zh-cn')
      .fromNow();
    this.hostName = info.hostName;
    this.isAdmin = info.hostId === userInfo._id;
    this.howManyWatch = `${info.watch}人关注`;
    this.isWatched = (await db.collection('WatchDiscussionRoom').where({discussionRoomId, watcherId:userInfo._id}).count()).total === 1
    // 获取其他管理员列表
    await this.loadAssistant()
    await this.loadQuestion()
    wx.hideLoading()
    this.ready = true;
    this.$apply();
  }

}
</script>
