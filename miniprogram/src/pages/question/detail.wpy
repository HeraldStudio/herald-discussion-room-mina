<style lang="less">
#question-detail {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  .top-panel {
    margin-left: 30rpx;
    margin-bottom: 30rpx;
    .header {
      font-size: 24rpx;
      color: #888;
    }
    .title {
      display: flex;
      margin-right: 40rpx;
      justify-content: space-between;
      align-items: center;
      margin-top: 10rpx;
      .name {
        font-size: 45rpx;
        color: #333;
        font-weight: bold;
      }
      .watch {
        height: 50rpx;
        font-size: 24rpx;
        line-height: 50rpx;
        padding: 0 20rpx;
        border-radius: 100rpx;
        border: none;
        background: #eb5757;
        color: #fff;
        font-weight: #fff;
        font-weight: bold;
      }
    }
  }
  .detail-panel {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15rpx;
    .secondary{
      font-size: 24rpx;
      margin-left: 30rpx;
      margin-top: 15rpx;
    }
    .is-selected{
      margin-top: 10rpx;
      margin-left: 30rpx;
      display:flex;
      align-items: center;
      icon{
        margin:0 10rpx;
      }
      .text{
        margin:0;
      }
    }
    .button{
      margin-right: 40rpx;
      background: #eb5757;
      padding: 10rpx 30rpx;
      color: #fff;
      font-size: 24rpx;
      margin-top: 15rpx;
    }
    .watch{
      background: #219653;
    }
  }
  .admin-panel {
    margin-left: 30rpx;
    display: flex;
    margin-top: 15rpx;
    margin-bottom: 15rpx;
    .delete {
      color: #eb5757;
      font-size: 24rpx;
      margin-right: 15rpx;
    }
    .assistant {
      color: #13acd9;
      font-size: 24rpx;
      margin-right: 15rpx;
    }
  }
  .description-panel {
    font-size: 32rpx;
    color: #333;
    margin: 15rpx 40rpx 15rpx 30rpx;
  }
  .image-panel {
    padding: 0 40rpx 15rpx 30rpx;
    display: flex;
    align-items: stretch;
    flex-direction: column;
    image{
      background: #f0f0f0;
      border: #f0f0f0 solid 1rpx;
      width: 680rpx;
    }
    .hint{
      font-size: 24rpx;
      color: #888;
      text-align: center;
      margin-top: 15rpx;
    }
  }
  .filter-panel {
    margin-left: 30rpx;
    margin-top: 15rpx;
    margin-right: 40rpx;
    margin-bottom: 15rpx;
    display: flex;
    justify-content: space-between;
    align-items: center;
    .sort {
      display: flex;
      align-items: center;
      .tag {
        color: #888;
        font-size: 24rpx;
        margin-right: 15rpx;
      }
      .strategy {
        color: #13acd9;
        font-size: 24rpx;
      }
    }
    .selected {
      display: flex;
      align-items: center;
      .tag {
        color: #888;
        font-size: 24rpx;
        margin-right: 15rpx;
      }
      .circle {
        width: 16px;
        height: 16px;
        border: solid #eee 1px;
        border-radius: 100px;
      }
    }
  }
  .new-question-panel {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    border-top-style: solid;
    border-top-width: 1px;
    border-top-color: #f0f0f0;
    background: #fff;
    button {
      background: #219653;
      color: #fff;
      font-size: 32rpx;
      font-weight: bold;
      margin: 20rpx 100rpx;
      border-radius: 100rpx;
    }
  }
 .back-to-top{
    font-size: 32rpx;
    padding: 15rpx 30rpx;
    border-radius: 100rpx;
    position: fixed;
    top: 20rpx;
    font-weight: bold;
    color: #333;
    background: #fff;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.25);
    opacity: 0.7;
    left: 281rpx;
  }
  .question-panel {
    margin-bottom: 120rpx;
    .empty{
      font-size: 32rpx;
      color: #888;
      text-align: center;
      margin: 40rpx;
    }
    .item-cell {
      padding: 20rpx 30rpx;
      width: 690rpx;
      .top {
        font-size: 24rpx;
        color: #888;
        margin-bottom: 10rpx !important;
        display: flex;
        .delete {
          color: #eb5757;
          margin: 0 15rpx;
        }
        .modify {
          color: #13acd9;
        }
      }
      .title {
        font-size: 32rpx;
        color: #333;
        font-weight: bold;
        margin-bottom: 10rpx;
      }
      .content{
        image{
          width: 670rpx;
          height: 500rpx;
          border: solid 1rpx #f0f0f0;
          background: #f0f0f0;
        }
        .hint{
          font-size: 24rpx;
          color: #888;
          width: 650rpx;
          text-align: center;
          margin-bottom: 15rpx;
        }
      }
      .description {
        font-size: 32rpx;
        color: #333;
        margin-bottom: 10rpx;
      }
      .bottom {
        display: flex;
        align-items: center;
        margin: 15rpx 0;
        justify-content: space-between;
        text {
          font-size: 24rpx;
          color: #888;
          margin-right: 10rpx;
        }
        .button {
          background: #219653;
          padding: 10rpx 30rpx;
          color: #fff;
          font-size: 24rpx;
        }
      }
      .comment-panel{
        .comment-cell{
          margin-top: 15rpx;
          .top{
            display: flex;
            justify-content: space-between;
          }
          .delete{
            color: #eb5757;
          }
          .content{
            color:#333;
            font-size: 28rpx;
            margin-bottom: 15rpx;
          }
        }
        .bottom{
          margin-top: 15rpx;
          margin-bottom: 0 !important;
          justify-content: space-around;
          .button{
            color: #219653;
            padding: 10rpx 30rpx;
            background: #f0f0f0;
            font-size: 24rpx;
          }
        }
      }
    }
  }
}


.sperator{
  border-top-color: #EEE;
  border-top-width: 20rpx;
  border-top-style: solid;
}
.homepage-and-refresh{
  position: fixed;
  right: 30rpx;
  bottom: 140rpx;
  display: flex;
  align-items: center;
  flex-direction: column;
  height: 160rpx;
  justify-content: space-between;
  .floating-button{
    background: rgba(0, 0, 0, 0.4);
    border-radius: 1000rpx;
    width: 75rpx;
    height: 75rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.25);
    image{
      width: 50rpx;
      height: 50rpx;
    }
  }
  .floating-button:active{
    background: rgba(0, 0, 0, 0.8);
  }
}
</style>
<template lang="pug">
  view#question-detail(wx:if="{{ready}}")
    view.top-panel
      view.header 答疑室 {{discussionRoomName}} 之中的问题
      view.title
        view.name {{title}} 
    view.dot-line
    view.detail-panel
      view.first-line
        view.secondary {{questionerName}} {{createdTime}} 提问
        view.is-selected
          view.secondary.text(wx:if="{{isSelected}}") 精选问题
          icon(type="success" size="18" wx:if="{{isSelected}}")
          view.secondary.text 还有 {{howManyWatch}} 人关注这个问题
      view.button( @tap="toggleWatch" wx:if="{{isWatched}}") 取消关注
      view.button.watch( @tap="toggleWatch" wx:else) 关注问题 
    view.dot-line 
    view.admin-panel(wx:if="{{canDelete || canSelect}}")
      view.delete(@tap="deleteQuestion" wx:if="{{canDelete}}") 删除问题
      view.assistant(@tap="toggleSelect" wx:if="{{canSelect}}") {{isSelected?'取消':'设置'}}精选问题
      view.assistant(@tap="modifyQuestion" wx:if="{{canModify}}") 修改问题
    view.dot-line
    view.description-panel {{description}}
    view.image-panel
      image(wx:if="{{imageCode}}" @tap="showImage({{imageCode}})" src="{{imageCode}}" mode="aspectFill")
      view.hint(wx:if="{{imageCode}}") (点击图片查看大图)
    view.sperator
    view.filter-panel
      view.sort
        view.tag 排序↓
        view.strategy(@tap="toggleSort") {{sort}}
    view.sperator
    view.question-panel
      view.empty(wx:if="{{!hasAnswer}}" @tap="refresh") {{emptyHint}}
      repeat(for="{{answerList}}" index="index" key="item._id")
        view.item-cell
          view.top 
            view {{item.respondentName}} {{item.lastModifiedTime}}回答
            view.delete(wx:if="{{item.canDelete}}" @tap="deleteAnswer({{item._id}})") 删除答案
            view.modify(wx:if="{{item.canModify}}" @tap="modifyAnswer({{item._id}})") 修改答案
          view.content
            view.text
              view.description {{item.description}}
            image(@tap="showImage({{item.imageCode}})" mode="aspectFill" wx:if="{{item.imageCode}}" src="{{item.imageCode}}")
            view.hint(wx:if="{{item.imageCode}}") (点击查看大图)
          view.dot-line
          view.bottom
            text 有 {{item.vote}} 人认为答案有帮助
            view.button.cancel(@tap="vote({{item._id}},{{item.isVoted}})" wx:if="{{item.isVoted}}") 取消支持
            view.button(@tap="vote({{item._id}},{{item.isVoted}})" wx:else) 支持答案
          view.dot-line
          view.comment-panel
            repeat(for="{{item.commentList}}" item="comment" key="comment._id")
              view.comment-cell
                view.top
                  view.commentator {{comment.commentatorName}} {{comment.createdTime}} 评论/追问
                  view.delete(wx:if="{{comment.canDelete}}" @tap="deleteComment({{comment._id}},{{item._id}})") 删除评论/追问
                view.content {{comment.content}}
              view.dot-line
            view.bottom
              view.button( @tap="createComment({{item._id}})") 添加评论/追问
        view.sperator

    view.new-question-panel
      button(@tap="createAnswer") 我要回答
    view.back-to-top(@tap="backToTop" wx:if="{{scroll > 50}}") 回到顶部

    view.homepage-and-refresh
      view.floating-button(@tap="homepage")
        image(src="cloud://discussion-room-3fd312.6469-discussion-room-3fd312/assets/shouye-xianxing.png")
      view.floating-button(@tap="refresh")
        image(src="cloud://discussion-room-3fd312.6469-discussion-room-3fd312/assets/shuaxin.png")
</template>

<script>
import wepy from 'wepy';
import callFunction from '../../utils/callFunction'; // 引入云函数调用的便捷封装
import getUserInfo from '../../utils/getUserInfo';
//import moment from 'moment'
//import momentCN from 'moment/locale/zh-cn'
const db = wx.cloud.database();
const moment = require('moment');
export default class DiscussionRoomDetail extends wepy.page {
  config = {
    navigationBarTitleText: '问题详情页'
  };
  components = {};

  mixins = [];

  data = {
    ready:false,
    discussionRoomId: '',
    discussionRoomName: '',
    title: '',
    createdTime: '',
    questionerName: '',
    isSelected: false,
    isWatched: false,
    howManyWatch: 0,
    canDelete:false,
    canSelect:false,
    canModify:false,
    description:'',
    imageCode:'',
    sort: '最新动态', // 最多支持
    selectedOnly: false,
    page: 0, // 分页计数器
    answerList: [],
    loading: false,
    emptyHint:'空空如也，点击刷新', // 加锁
    userInfo:{},
    scroll:0
  };

  init(){
    this.ready=false;
    this.discussionRoomId= '';
    this.discussionRoomName= '';
    this.title= '';
    this.createdTime= '';
    this.questionerName= '';
    this.isSelected= false;
    this.isWatched= false;
    this.howManyWatch= 0;
    this.canDelete=false;
    this.canSelect=false;
    this.canModify=false;
    this.description='';
    this.imageCode='';
    this.sort= '最新动态'; // 最多支持
    this.selectedOnly= false;
    this.page= 0; // 分页计数器
    this.answerList= [];
    this.loading= false;
    this.emptyHint='空空如也，点击刷新'; // 加锁
    this.userInfo={};
    this.scroll=0
    this.$apply()
  }

  computed = {
    hasAnswer(){
      return this.answerList.length > 0
    }
  };

  methods = {
    modifyQuestion(){
      this.loadInfo(this.questionId)
      wx.navigateTo({
        url:'/pages/question/createOrModify?questionId='+this.questionId
      })
    },
    modifyAnswer(answerId){
      this.loadInfo(this.questionId)
      wx.navigateTo({
        url:'/pages/answer/createOrModify?answerId='+answerId
      })
    },
    showImage(code){
      this.loadInfo(this.questionId)
      wx.previewImage({urls:[code]})
    },
    async refresh(){
      this.loadInfo(this.questionId)
      this.answerList = []
      this.page = 0
      console.log('点击加载')
      wx.showLoading({title:'正在加载'})
      await this.loadAnswer()
      wx.hideLoading()
    },
    homepage(){
      wx.navigateBack({
        delta:100
      })
      wx.redirectTo({
        url:'/pages/index'
      })
    },
    toggleSort(){
      this.loadInfo(this.questionId)
      this.emptyHint = '空空如也，点击刷新'
      this.sort = this.sort === '最新动态' ? '最多支持' : '最新动态'
      this.answerList = []
      this.page = 0
      this.loadAnswer()
    },
    backToTop(){
      this.loadInfo(this.questionId)
      wx.pageScrollTo({
        scrollTop:0
      })
    },
    async toggleWatch(){
      this.loadInfo(this.questionId)
      if(this.loading){
        return
      }
      // 加锁
      this.loading = true
      let userInfo = await getUserInfo()
      wx.showLoading({
        title:'请稍候'
      })
      let res = await callFunction('question/watch', {questionId:this.questionId, setOrCancel: !this.isWatched})
      if(res.success){
        this.isWatched = (await db.collection('WatchQuestion').where({questionId:this.questionId, watcherId:userInfo._id}).count()).total === 1
        this.$apply()
        wx.hideLoading()
      } else {
        wx.hideLoading()
        wx.showToast({icon:'none', title:res.reason})
      }
      this.loading = false;
    },
    async vote(answerId, isVoted){
      this.loadInfo(this.questionId)
      if(this.loading){
        return
      }
      // 加锁
      this.loading = true
      let userInfo = await getUserInfo()
      wx.showLoading({
        title:'请稍候'
      })
      let res = await callFunction('answer/vote', {answerId:answerId, setOrCancel: !isVoted})
      if(res.success){
        let newAnswerList = this.answerList.map(async (answer) => {
          if(answer._id === answerId){
            answer.isVoted = (await db.collection('VoteAnswer').where({answerId, voterId:userInfo._id}).count()).total === 1
            answer.vote = (await db.collection('Answer').doc(answerId).get()).data.vote
          }
          return answer
        });
        this.answerList = await Promise.all(newAnswerList)
        this.$apply()
        wx.hideLoading()
      } else {
        wx.hideLoading()
        wx.showToast({icon:'none', title:res.reason})
      }
      this.loading = false;
    },
    async toggleSelect(){
      this.loadInfo(this.questionId)
      if(this.loading){
        return
      }
      // 加锁
      this.loading = true
      let userInfo = await getUserInfo()
      wx.showLoading({
        title:'请稍候'
      })
      let res = await callFunction('question/selected', {questionId:this.questionId, setOrCancel: !this.isSelected})
      if(res.success){
        this.isSelected = (await db.collection('Question').doc(this.questionId).get()).data.isSelected
        this.$apply()
        wx.hideLoading()
      } else {
        wx.hideLoading()
        wx.showToast({icon:'none', title:res.reason})
      }
      this.loading = false;
    },
    async deleteQuestion(){
      this.loadInfo(this.questionId)
      let that = this
      wx.showModal({
        title: '确认删除',
        content: '问题删除后将无法恢复，内容及相关答案、评论都将丢失',
        success(res) {
          if (res.confirm) {
            wx.showLoading({title:'正在删除'})
            callFunction('question/delete',{questionId:that.questionId}).then((res)=>{
              if(res.success){
              wx.showToast({
                title:'删除成功'
              })
              } else {
                throw res.reason
              }
              wx.navigateBack({delta:1})
            }).catch((e)=>{
              console.log(e)
              wx.showToast({
                icon:'none',
                title:e
              })
            })
            wx.hideLoading()
          } else if (res.cancel) {
            console.log('用户点击取消')
          }
        }
      })
    },
    async deleteAnswer(answerId){
      this.loadInfo(this.questionId)
      let that = this
      wx.showModal({
        title: '确认删除',
        content: '答案删除后将无法恢复，内容及相关评论都将丢失',
        success(res) {
          if (res.confirm) {
            callFunction('answer/delete',{answerId}).then((res)=>{
              if(res.success){
              wx.showToast({
                title:'删除成功'
              })
              } else {
                throw res.reason
              }
              let newAnswerList = []
              that.answerList.forEach(answer => {
                if(answer._id !== answerId) {
                  newAnswerList.push(answer)
                }
              })
              that.answerList = newAnswerList
              that.$apply()
            }).catch(e=>{
              console.log(e)
              wx.showToast({
                icon:'none',
                title:e
              })
            })
          } else if (res.cancel) {
            console.log('用户点击取消')
          }
        }
      })
    },
    deleteComment(commentId, answerId){
      this.loadInfo(this.questionId)
      let that = this
      wx.showModal({
        title: '确认删除',
        content: '评论删除后将无法恢复',
        success(res) {
          if (res.confirm) {
            callFunction('comment/delete',{commentId}).then((res)=>{
              if(res.success){
              wx.showToast({
                title:'删除成功'
              })
              } else {
                throw res.reason
              }
              // 重新更新答案列表
              let newAnswerList = []
              that.answerList.forEach(answer => {
                if(answer._id === answerId) {
                  let newCommentList = []
                  answer.commentList.forEach((comment) => {
                    if(comment._id !== commentId){
                      newCommentList.push(comment)
                    }
                  })
                  answer.commentList = newCommentList
                }
                newAnswerList.push(answer)
              })
              that.answerList = newAnswerList
              that.$apply()
            }).catch(e=>{
              console.log(e)
              wx.showToast({
                icon:'none',
                title:e
              })
            })
          } else if (res.cancel) {
            console.log('用户点击取消')
          }
        }
      })
    },
    createComment(answerId){
      this.loadInfo(this.questionId)
      wx.navigateTo({
        url:'/pages/comment/create?answerId='+answerId+`&questionId=${this.questionId}`
      })
    },
    setAssistant(){
      this.loadInfo(this.questionId)
      wx.navigateTo({
        url:`/pages/discussionRoom/assistant?discussionRoomId=${this.discussionRoomId}`
      })
    },
    createAnswer(){
      this.loadInfo(this.questionId)
      wx.navigateTo({
        url:`/pages/answer/createOrModify?questionId=${this.questionId}`
      })
    }
  };

  async loadAnswer() {
    const db = wx.cloud.database()
      if (this.loading) {
        return;
      }
      this.loading = true; // 加锁
      this.$apply();
      let query = { questionId: this.questionId };
      let res 
      if(this.page > 0){
        res = await db
        .collection('Answer')
        .skip(this.page * 10)
        .limit(10)
        .orderBy(
          this.sort === '最新动态' ? 'lastModifiedTime' : 'vote',
          'desc'
        )
        .orderBy(
          'lastModifiedTime',
          'desc'
        )
        .where(query).get();
      } else {
        res = await db
        .collection('Answer')
        .limit(10)
        .orderBy(
          this.sort === '最新动态' ? 'lastModifiedTime' : 'vote',
          'desc'
        )
        .orderBy(
          'lastModifiedTime',
          'desc'
        )
        .where(query).get();
      }
      this.page = this.page + 1; // 记录分页
      let answerSlice = res.data.map(async (k)=> {
        moment.locale('zh-cn');
        let userInfo = await getUserInfo()
        k.lastModifiedTime = moment(k.lastModifiedTime).fromNow();
        k.isVoted = (await db.collection('VoteAnswer').where({voterId:this.userInfo._id, answerId:k._id}).count()).total === 1;
        k.canDelete = this.canDelete || k.respondentId === userInfo._id
        k.canModify = k.respondentId === userInfo._id
        let hasMoreComment = true
        let commentList = []
        let commentPage = 0
        // 对于答案获取所有的评论
        while(hasMoreComment){
          let comments
          if(commentPage === 0){
            comments = (await db.collection('Comment').limit(10).orderBy('createdTime', 'desc').where({answerId:k._id}).get()).data
          } else {
            comments = (await db.collection('Comment').skip(commentPage*10).limit(10).where({answerId:k._id}).orderBy('createdTime', 'desc').get()).data
          }
          commentPage += 1
          commentList = commentList.concat(comments)
          hasMoreComment = !(comments.length === 0)
        }
        commentList = commentList.map( l => {
          l.createdTime = moment(l.createdTime).fromNow()
          l.canDelete = this.canDelete || l.commentatorId === userInfo._id
          return l
        })
        k.commentList = commentList
        return k;
      })
      answerSlice = await Promise.all(answerSlice)
      this.answerList = this.answerList.concat(answerSlice);
      this.loading = false
      console.log(this.answerList)
      this.$apply()
    }

  events = {};
  onShareAppMessage(obj){
    let title = ''
    if(this.title.indexOf('?')!==-1){
      title = `请问：${this.title}`
    } else {
      title = `发现一个问题：${this.title}，有人能解答吗？`
    }

    return {
      title,
      url:`/pages/question/detail?questionId=${this.questionId}`
    }
  }
  onReachBottom() {
    this.loadAnswer()
  }
  onPageScroll(obj){
    this.scroll = obj.scrollTop
    this.$apply()
  }

  async loadInfo(questionId){
    console.log('刷新问题状态')
    const db = wx.cloud.database();
    let info;
    try {
      info = (await db
        .collection('Question')
        .doc(questionId)
        .get()).data;
      return info
    } catch (e) {
      // 获取失败
      wx.showToast({icon:'none', title:'问题不存在或已删除'})
      setTimeout(() => {
        wx.redirectTo({url:'/pages/index'})
      }, 1500);
      return
    }
  }

  async onLoad(options) {
    this.init()
    let { questionId } = options;
    console.log(questionId)
    let userInfo = await getUserInfo();
    this.userInfo = userInfo
    if (!questionId) {
      // 没有传入问题ID
      wx.showToast({icon:'none', title:'问题不存在或已删除'})
      setTimeout(() => {
        wx.navigateBack({delta:1})
      }, 1500);
      return
    }
    wx.showLoading({title:'正在加载'})
    // 获取问题基本信息
    let info = await this.loadInfo(questionId)
    this.questionId = questionId
    this.title = info.title;
    let discussionRoomId = info.discussionRoomId
    let discussionRoomInfo;
    try {
      discussionRoomInfo = (await db
        .collection('DiscussionRoom')
        .doc(discussionRoomId)
        .get()).data;
    } catch (e) {
      // 获取失败
      wx.showToast({icon:'none', title:'问题不存在或已删除'})
      setTimeout(() => {
        wx.navigateBack({delta:1})
      }, 1500);
      return
    }
    this.discussionRoomName = discussionRoomInfo.courseName;
    this.questionerName = info.questionerName
    moment.locale('zh-cn')
    this.createdTime = moment(info.createdTime).fromNow()
    this.isSelected = info.isSelected
    this.howManyWatch = (await db.collection('WatchQuestion').where({questionId}).count()).total
    this.canDelete = discussionRoomInfo.hostId === userInfo._id || info.questionerId === userInfo._id
    if(!this.canDelete){
      // 如果不是答疑室创建者，检查是否是答疑室管理员
      let assistantRes = (await db.collection('Assistant').where({discussionRoomId, assistantId:userInfo._id}).count()).total
      this.canDelete = assistantRes === 1
    }
    this.canSelect = discussionRoomInfo.hostId === userInfo._id
    this.description = info.description
    this.imageCode = info.imageCode
    this.canModify = info.questionerId === userInfo._id
    // 检查是否关注问题
    console.log({questionId, watcherId:userInfo._id})
    this.isWatched = (await db.collection('WatchQuestion').where({questionId, watcherId:userInfo._id}).count()).total === 1
    await this.loadAnswer()
    wx.hideLoading()
    this.ready=true
    this.$apply()
  }

}
</script>
